apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        return ""
    }
    return p.text.trim()
}

android {
    def signingPropFile = new File(System.properties['user.home'], ".signing/bluemusic/signing.properties")
    if (signingPropFile.canRead()) {
        def Properties signingProps = new Properties()
        signingProps.load(new FileInputStream(signingPropFile))
        signingConfigs {
            release {
                storeFile new File(signingProps['release.storePath'])
                keyAlias signingProps['release.keyAlias']
                storePassword signingProps['release.storePassword']
                keyPassword signingProps['release.keyPassword']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    def versionMajor = 2
    def versionMinor = 1
    def versionTag = ""


    defaultConfig {
        applicationId "eu.darken.bluemusic"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode versionMajor * 10000 + versionMinor
        versionName "${versionMajor}.${versionMinor}${versionTag}"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.outputs.each { output ->
                    def file = output.outputFile
                    //noinspection GroovyAssignabilityCheck
                    output.outputFile = new File(file.parent, applicationId + "-v" + defaultConfig.versionName + "(" + defaultConfig.versionCode + ")-" + variant.buildType.name.toUpperCase() + "-" + gitSha() + ".apk")
                }
            }
        }
    }
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        //noinspection GroovyMissingReturnStatement
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release') && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'lib/arm64-v8a/librealm-jni.so'
        exclude 'lib/x86_64/librealm-jni.so'
    }
}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}
ext {
    supportLibVersion = '26.1.0'
    daggerVersion = '2.11'
}
//noinspection GroovyAssignabilityCheck
configurations.all {
    //noinspection GroovyAssignabilityCheck
    resolutionStrategy.force "com.android.support:recyclerview-v7:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:support-v4:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:design:${supportLibVersion}"
    resolutionStrategy.force "com.android.support:appcompat-v7:${supportLibVersion}"
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Support libs
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:customtabs:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:preference-v14:${supportLibVersion}"

    // Crashtracking
    compile 'com.bugsnag:bugsnag-android:3.6.0'

    // MVP lib
    compile 'eu.darken.ommvplib:library:0.0.10'

    // RX
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.3'

    //Dagger
    compile "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    androidTestCompile 'com.google.code.findbugs:jsr305:3.0.1'
    compile "com.google.dagger:dagger-android:${daggerVersion}"
    compile "com.google.dagger:dagger-android-support:${daggerVersion}"

    //Butterknife
    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'

    //Timber
    compile 'com.jakewharton.timber:timber:4.5.0'

    // jUnit
    testCompile 'junit:junit:4.12'

    // Mocktio
    androidTestCompile 'org.mockito:mockito-core:2.6.3'
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'

    //Intrumentation tests (UI tests)
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'

    //Resolve conflicts with depdencies
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"

    //Leakcanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    // IAP
    compile 'com.android.billingclient:billing:1.0'
}